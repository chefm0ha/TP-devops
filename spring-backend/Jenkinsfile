pipeline {
    agent any

    tools {
        maven 'Maven-3.9'
        jdk 'JDK-11'
    }

    environment {
        PROJECT_NAME = 'spring-boot-app'
        SONAR_HOST_URL = 'http://sonarqube:9000'
        GIT_BRANCH = 'develop'
    }

    stages {
        stage('📥 Checkout') {
            steps {
                echo '========================================='
                echo '📥 ÉTAPE 1: Clonage du repository'
                echo '========================================='

                checkout scm

                // Vérifier la structure du projet
                sh '''
                    echo "📁 Contenu de la racine:"
                    ls -la

                    echo ""
                    echo "📁 Contenu de spring-backend:"
                    ls -la spring-backend/

                    echo ""
                    echo "📄 Vérification du pom.xml:"
                    if [ -f spring-backend/pom.xml ]; then
                        echo "✅ pom.xml trouvé dans spring-backend/"
                    else
                        echo "❌ pom.xml NON trouvé!"
                        exit 1
                    fi
                '''

                script {
                    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def gitBranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    echo "📌 Branch: ${gitBranch}"
                    echo "📌 Commit: ${gitCommit}"
                }
            }
        }

        stage('🔨 Build') {
            steps {
                echo '========================================='
                echo '🔨 ÉTAPE 2: Compilation du projet'
                echo '========================================='

                sh '''
                    cd spring-backend

                    echo "📁 Répertoire actuel: $(pwd)"
                    echo ""

                    echo "🔍 Version de Maven:"
                    mvn --version
                    echo ""

                    echo "🔍 Version de Java:"
                    java -version
                    echo ""

                    echo "🏗️ Compilation en cours..."
                    mvn clean compile -DskipTests
                '''
            }
        }

        stage('🧪 Tests & Coverage') {
            steps {
                echo '========================================='
                echo '🧪 ÉTAPE 3: Tests unitaires + Couverture'
                echo '========================================='

                sh '''
                    cd spring-backend

                    echo "🧪 Lancement des tests avec JaCoCo..."
                    mvn test

                    echo ""
                    echo "📊 Vérification du rapport JaCoCo..."
                    if [ -f target/site/jacoco/jacoco.xml ]; then
                        echo "✅ Rapport JaCoCo généré avec succès!"
                        echo "📄 Emplacement: target/site/jacoco/jacoco.xml"
                        ls -lh target/site/jacoco/
                    else
                        echo "❌ ERREUR: Rapport JaCoCo non trouvé!"
                        echo "⚠️  La couverture ne sera pas disponible dans SonarQube"
                    fi
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'spring-backend/**/target/surefire-reports/*.xml'
                    echo "📊 Résultats des tests publiés"
                }
            }
        }

        stage('📦 Package') {
            steps {
                echo '========================================='
                echo '📦 ÉTAPE 4: Génération du package JAR'
                echo '========================================='

                sh '''
                    cd spring-backend

                    echo "📦 Création du package..."
                    mvn package -DskipTests

                    echo ""
                    echo "✅ Package créé avec succès!"
                    echo "📄 Fichiers générés:"
                    ls -lh target/*.jar
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'spring-backend/**/target/*.jar', fingerprint: true
                    echo "📦 Artifact archivé: spring-backend/target/*.jar"
                }
            }
        }

        stage('🔍 SonarQube Analysis') {
            steps {
                echo '========================================='
                echo '🔍 ÉTAPE 5: Analyse de qualité du code'
                echo '========================================='

                script {
                    try {
                        withSonarQubeEnv('SonarQube') {
                            sh '''
                                cd spring-backend

                                echo "🔍 Vérification des rapports avant analyse..."
                                if [ -f target/site/jacoco/jacoco.xml ]; then
                                    echo "✅ Rapport JaCoCo trouvé"
                                else
                                    echo "⚠️  Rapport JaCoCo manquant"
                                fi

                                echo ""
                                echo "🔍 Analyse SonarQube en cours..."
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=spring-boot-app \
                                    -Dsonar.projectName='Spring Boot App' \
                                    -Dsonar.host.url=http://sonarqube:9000

                                echo ""
                                echo "✅ Analyse SonarQube terminée!"
                            '''
                        }
                    } catch (Exception e) {
                        echo "⚠️ Analyse SonarQube échouée: ${e.message}"
                        echo "ℹ️ Vérifiez que SonarQube est configuré dans Jenkins"
                    }
                }
            }
        }

        stage('✅ Quality Gate') {
            steps {
                echo '========================================='
                echo '✅ ÉTAPE 6: Vérification du Quality Gate'
                echo '========================================='

                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "⚠️ Quality Gate status: ${qg.status}"
                                echo "ℹ️ Pour le TP, on continue malgré le Quality Gate"
                            } else {
                                echo "✅ Quality Gate passé avec succès!"
                            }
                        }
                    } catch (Exception e) {
                        echo "⚠️ Impossible de vérifier le Quality Gate: ${e.message}"
                        echo "ℹ️ Assurez-vous que le webhook SonarQube est configuré"
                    }
                }
            }
        }
    }

    post {
        success {
            echo '========================================='
            echo '✅ PIPELINE RÉUSSIE!'
            echo '========================================='
            echo "✅ Build #${BUILD_NUMBER} terminé avec succès"
            echo "📦 Artifact disponible: spring-backend/target/*.jar"
            echo "🔍 Rapport SonarQube: ${SONAR_HOST_URL}/dashboard?id=spring-boot-app"
            echo "📊 Rapport de tests: ${BUILD_URL}testReport/"
            echo ""
            echo "🎉 Toutes les étapes ont été complétées!"
        }

        failure {
            echo '========================================='
            echo '❌ PIPELINE ÉCHOUÉE!'
            echo '========================================='
            echo "❌ Build #${BUILD_NUMBER} a échoué"
            echo "📋 Consultez les logs ci-dessus pour plus de détails"
            echo "🔗 Lien vers le build: ${BUILD_URL}"
        }

        unstable {
            echo '========================================='
            echo '⚠️  PIPELINE INSTABLE'
            echo '========================================='
            echo "⚠️  Build #${BUILD_NUMBER} est instable"
            echo "📋 Vérifiez les tests ou le Quality Gate"
        }

        always {
            echo '========================================='
            echo '🧹 NETTOYAGE'
            echo '========================================='
            echo "Pipeline terminé à: ${new Date()}"
            echo "Durée totale: ${currentBuild.durationString}"
        }
    }
}