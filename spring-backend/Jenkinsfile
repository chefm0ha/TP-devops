pipeline {
    agent any

    tools {
        maven 'Maven-3.9'
        jdk 'JDK-11'
    }

    environment {
        // Configuration du projet
        PROJECT_NAME = 'spring-boot-app'
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'

        // SonarQube
        SONAR_HOST_URL = 'http://sonarqube:9000'

        // Docker (pour plus tard)
        DOCKER_IMAGE = 'chefmoha/spring-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo '========================================='
                echo 'üì• √âTAPE 1: Clonage du repository'
                echo '========================================='

                // Git clone automatique par Jenkins
                checkout scm

                // Afficher les informations du commit
                script {
                    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def gitBranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    def gitAuthor = sh(returnStdout: true, script: 'git log -1 --pretty=format:"%an"').trim()

                    echo "üìå Branch: ${gitBranch}"
                    echo "üìå Commit: ${gitCommit}"
                    echo "üìå Author: ${gitAuthor}"
                }
            }
        }

        stage('üî® Build') {
            steps {
                echo '========================================='
                echo 'üî® √âTAPE 2: Compilation du projet'
                echo '========================================='

                script {
                    try {
                        sh '''
                            echo "üîç Version de Maven:"
                            mvn --version

                            echo "üîç Version de Java:"
                            java -version

                            echo "üèóÔ∏è Compilation en cours..."
                            mvn clean compile -DskipTests
                        '''
                    } catch (Exception e) {
                        error("‚ùå La compilation a √©chou√©: ${e.message}")
                    }
                }
            }
        }

        stage('üß™ Tests') {
            steps {
                echo '========================================='
                echo 'üß™ √âTAPE 3: Ex√©cution des tests unitaires'
                echo '========================================='

                script {
                    try {
                        sh '''
                            echo "üß™ Lancement des tests..."
                            mvn test
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Certains tests ont √©chou√©, mais on continue..."
                    }
                }
            }
            post {
                always {
                    // Publier les r√©sultats des tests
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'

                    echo "üìä R√©sultats des tests publi√©s"
                }
            }
        }

        stage('üì¶ Package') {
            steps {
                echo '========================================='
                echo 'üì¶ √âTAPE 4: G√©n√©ration du package JAR'
                echo '========================================='

                script {
                    try {
                        sh '''
                            echo "üì¶ Cr√©ation du package..."
                            mvn package -DskipTests

                            echo "‚úÖ Package cr√©√© avec succ√®s!"
                            ls -lh target/*.jar
                        '''
                    } catch (Exception e) {
                        error("‚ùå La cr√©ation du package a √©chou√©: ${e.message}")
                    }
                }
            }
            post {
                success {
                    // Archiver le JAR g√©n√©r√©
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    echo "üì¶ Artifact archiv√©: target/*.jar"
                }
            }
        }

        stage('üîç SonarQube Analysis') {
            steps {
                echo '========================================='
                echo 'üîç √âTAPE 5: Analyse de qualit√© du code'
                echo '========================================='

                script {
                    try {
                        // Analyse avec SonarQube
                        withSonarQubeEnv('SonarQube') {
                            sh '''
                                echo "üîç Analyse SonarQube en cours..."
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=spring-boot-app \
                                    -Dsonar.projectName='Spring Boot App' \
                                    -Dsonar.host.url=${SONAR_HOST_URL}
                            '''
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Analyse SonarQube √©chou√©e: ${e.message}"
                        echo "‚ÑπÔ∏è V√©rifiez que SonarQube est configur√© dans Jenkins"
                    }
                }
            }
        }

        stage('‚úÖ Quality Gate') {
            steps {
                echo '========================================='
                echo '‚úÖ V√©rification du Quality Gate'
                echo '========================================='

                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate status: ${qg.status}"
                                echo "‚ö†Ô∏è Le Quality Gate n'est pas pass√©, mais on continue pour le TP"
                                // unstable(message: "Quality Gate failed: ${qg.status}")
                            } else {
                                echo "‚úÖ Quality Gate pass√© avec succ√®s!"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Impossible de v√©rifier le Quality Gate: ${e.message}"
                        echo "‚ÑπÔ∏è Assurez-vous que le webhook SonarQube est configur√©"
                    }
                }
            }
        }
    }

    post {
        success {
            echo '========================================='
            echo '‚úÖ PIPELINE R√âUSSIE!'
            echo '========================================='
            echo "‚úÖ Build #${BUILD_NUMBER} termin√© avec succ√®s"
            echo "üì¶ Artifact disponible dans Jenkins"
            echo "üîç Rapport SonarQube: ${SONAR_HOST_URL}/dashboard?id=spring-boot-app"
        }

        failure {
            echo '========================================='
            echo '‚ùå PIPELINE √âCHOU√âE!'
            echo '========================================='
            echo "‚ùå Build #${BUILD_NUMBER} a √©chou√©"
            echo "üìã Consultez les logs pour plus de d√©tails"
        }

        always {
            echo '========================================='
            echo 'üßπ Nettoyage'
            echo '========================================='

            // Nettoyage des fichiers temporaires
            cleanWs(
                deleteDirs: true,
                patterns: [
                    [pattern: 'target/', type: 'INCLUDE']
                ]
            )
        }
    }
}